a = 0
# zerando para a contagem do proximo Passeio
d = 0
# zerando para a contagem do proximo Passeio
v = c(NULL)
# limpando o vetor v para armazenar o proximo Passeio
Sn = 0
# zerando para a contagem do Sn do proximo Passeio
for(j in 1:n){
# rodando Passeio de 199 passos
m = runif(1)
# criando o passeio
if(m < 0.5){Sn = Sn + 1}else{Sn = Sn - 1}
v[j] = Sn
if(j > 2){
# um Passeio so pode mudar de sinal depois do 2 momento;
if(v[j - 2] > 0 & v[j] < 0 || v[j - 2] < 0 & v[j] > 0){a = a + 1}
# contando o numero de troca de sinal de cada passeio;
}
if(Sn > 0){d = d + 1}
# contando o numero de lados acima do eixo x de cada passeio
}
f[i] = a
# armazenando o n?mero de troca de sinal de cada passeio
b[i] = max(v)
# armazenando o maior valor de cada passeio
c[i] = d
# armazenando o n?mero de lados acima do eixo x
}
cat("\nNumero de troca de sinais de cada Passeio:",f)
cat("\n")
cat("\nO maior valor de cada Passeio:",b)
cat("\n")
cat("\nO numero de lados de acima do eixo x de cada passeio:",c)
hist(f)
}
q3(199,3)
# A
q3a = function(n,r){
f  = c(NULL)
c  = c(NULL)
b  = c(NULL)
for(i in 1:r){
# rodando os 1000 passeios
a = 0
# zerando para a contagem do proximo Passeio
d = 0
# zerando para a contagem do proximo Passeio
v = c(NULL)
# limpando o vetor v para armazenar o proximo Passeio
Sn = 0
# zerando para a contagem do Sn do proximo Passeio
for(j in 1:n){
# rodando Passeio de 199 passos
m = runif(1)
# criando o passeio
if(m < 0.5){Sn = Sn + 1}else{Sn = Sn - 1}
v[j] = Sn
if(j > 2){
# um Passeio so pode mudar de sinal depois do 2 momento;
if(v[j - 2] > 0 & v[j] < 0 || v[j - 2] < 0 & v[j] > 0){a = a + 1}
# contando o numero de troca de sinal de cada passeio;
}
if(Sn > 0){d = d + 1}
# contando o numero de lados acima do eixo x de cada passeio
}
f[i] = a
# armazenando o numero de troca de sinal de cada passeio
b[i] = max(v)
# armazenando o maior valor de cada passeio
c[i] = d
# armazenando o n?mero de lados acima do eixo x
}
cat("\nNumero de troca de sinais de cada Passeio:",f)
cat("\n")
cat("\nO maior valor de cada Passeio:",b)
cat("\n")
cat("\nO numero de lados de acima do eixo x de cada passeio:",c)
hist(f)
}
q3a(199,10000)
Q4 = function(n){
x = 0
y = 0
v = c(NULL)
z = c(NULL)
v[1] = 0
z[1] = 0
for(i in 2:n){
# começa com 2. pois o primeiro momento já esta em (0,0)
m = runif(1)
if(m<0.5){
# se m < 0.5, se move na horizontal
m=runif(1)
if(m<0.5){x=x+1}else{x=x-1}
# se m < 0.5, se move para direita, senão, para a esquerda
v[i] = x
if(i == 1){z[i] = 0}else
# a coordenada vertical se mantém
{z[i] = z[i-1]}
}else{
# se m > 0.5, se move na vertical
m=runif(1)
if(m<0.5){y=y+1}else{y=y-1}
# se m < 0.5, se move para cima, senão, para baixo
z[i] = y
if(i == 1){v[i] = 0}else
# a coordenada horizontal se mantém
{v[i] = v[i-1]}
}}
plot(v,z, type = "l")
# plotando o gráfico em linhas
}
Q4(1000)
Q5 = function(n,r){
x  = 0
y  = 0
v  = c(NULL)
z  = c(NULL)
Sn = c(NULL)
v[1]  = 0
# similar ao passeio anterior
z[1]  = 0
for(j in 1:r){
for(i in 2:n){
m = runif(1)
if(m<0.5){
m=runif(1)
if(m<0.5){x=x+1}else{x=x-1}
v[i] = x
if(i == 1){z[i] = 0}else
{z[i] = z[i-1]}
}else{
m=runif(1)
if(m<0.5){y=y+1}else{y=y-1}
z[i] = y
if(i == 1){v[i] = 0}else
{v[i] = v[i-1]}
}}
Sn[j] = sqrt((v[n])^2) + sqrt((z[n])^2)
}
hist(Sn)
}
Q5(1000,100)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6(5,1000)
q6(10,1000)
q6(20,1000)
q6(100,1000)
q6(3,1000)
q6(5,1000)
q6(10,1000)
q6(20,1000)
q6(100,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = n)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = r)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
library("Hmisc")
base_de_dados <- read.csv("german_credit_21-1.csv")
getwd()
setwd("C:/Users/mathe/Documents/GitHub/EstatSite_R")
base_de_dados <- read.csv("german_credit_21-1.csv")
require(readxl)
base_de_dados <- read_xlsx("german_credit_21-1.xlsx")
describe(base_de_dados$sexo)
base_de_dados
describe(base_de_dados)
## Visualizando a base View(mtcars)
## cria uma tabela com combinacoes de cyl e gear e uma estatistica
## descritiva do mpg para cada combinacao
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
exemplo = c(1,2,3,4,5)
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
## Visualizando a base View(mtcars)
## cria uma tabela com combinacoes de cyl e gear e uma estatistica
## descritiva do mpg para cada combinacao
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
exemplo = c(1,2,3,4,5)
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
myData
## Visualizando a base View(mtcars)
## cria uma tabela com combinacoes de cyl e gear e uma estatistica
## descritiva do mpg para cada combinacao
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
myData
exemplo = c(1,2,3,4,5)
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
myData
mtcars
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x))
myData
exemplo = c(1,2,3,4,5)
myData <- aggregate(mtcars$mpg,
gears = mtcars$gear),
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
c(FUN = function(x) mean = mean(x),
FUN = function(x) sd = sd(x)))
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
c(FUN = function(x) mean = mean(x),
FUN = function(x) max  = max(x)))
myData <- aggregate(mtcars$mpg,
by = list(cyl = mtcars$cyl,
gears = mtcars$gear),
FUN = function(x) mean = mean(x),
FUN = function(x) max  = max(x))
library(ggplot2) # apenas para gerar o autoplot
library(fpp)     # pacote de forecast
autoplot(a10) +
ggtitle("Graf. Autoplot para Vendas de Antibioticos na Australia") +
ylab("$ milhoes") +
xlab("Ano")
## gera uma serie aleatoria
y <- ts(rnorm(50))
## plota o correlograma
ggAcf(y);
require(forecast)
## plota o correlograma
ggAcf(y)
## plota correlograma de beer2
ggAcf(beer2)
## cria um vetor com valores qualquer
dados_teste = c(10,20,15,30);
## utiliza o vetor como serie anual que inicia em 2005
dados_teste_serie_1 = ts(dados_teste, start = 2005);
## utiliza o vetor como serie mensal que inicia em 2005
dados_teste_serie_2 = ts(dados_teste, start = 2005, frequency = 12);
## utiliza o vetor como serie mensal que inicia em fevereiro de 2015
dados_teste_serie_3 = ts(dados_teste, start = c(2005,2), frequency = 12);
## graficos dos 3 para mostrar a diferenca nos eixos
par(mfrow=c(1,3));
plot(dados_teste_serie_1);
plot(dados_teste_serie_2);
plot(dados_teste_serie_3);
## carrega dados de vendas
dados = read.table("sales.csv", header=T);
## carrega dados de vendas
dados = read.table("sales.csv", header=T);
## da o nome de 'vendas_varejo' para a coluna 1
colnames(dados)[1] = "vendas_varejo"
## cria objeto ts, serie que comeca em janeiro de 1992
## dados sao mensais
dados_ts = ts(dados, start=c(1992,1), frequency=12);
## ajusta para um grafico apenas (por causa do 1o codigo)
par(mfrow=c(1,1));
## plota serie limitando eixo y
plot(dados_ts, ylim = c(0,max(dados_ts[,])));
## decomposicao
decomposicao = decompose(dados_ts, type = "multiplicative");
plot(decomposicao);
## plota correlograma de beer2
ggAcf(beer2)
## plota correlograma de beer2
ggAcf(beer)
require(fpp)
## plota correlograma de beer2
ggAcf(beer2)
install.packages("AppliedPredictiveModeling")
# Carrega pacote Caret para funcoes de modelagem
# Carrega pacote AppliedPredictiveModeling por causa da base
library(caret)
library(AppliedPredictiveModeling)
# Separa a base inicial em treino e teste (75-25)
set.seed(3433);
indice.amostra = createDataPartition(base$variavel.resposta,
p = 3/4)[[1]]
library("kernlab")
data(spam)
head(spam)
dim(spam)
summary(spam)
library(caret);
indice.treino <- createDataPartition(y = spam$type,
p = 0.75,
list = FALSE)
treino = spam[ indice.treino, ]
teste  = spam[-indice.treino, ]
sapply(treino,
function(x) sum(is.na(x)))
modelo = glm (type_new ~ our + over + remove,
data   = treino,
family = binomial)
spam$type_new=ifelse(spam$type=“spam”,1,0)
spam$type_new=ifelse(spam$type==“spam”,1,0)
spam$type_new=ifelse(spam$type="spam",1,0)
spam$type_new=ifelse(spam$type=="spam",1,0)
# install.packages("fpp")
require("fpp")
## funcao naive
naive(ausbeer)
## grafico da projecao
plot(naive(ausbeer),
xlab="Ano",
ylab="Prod. de Cerveja",
main="Forecast Naive")
## grafico com autoplot()
autoplot(naive(dj))
