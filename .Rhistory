p=0.75,
list=FALSE)
treino = spam[indice.treino, ]
teste = spam[-indice.treino, ]
sapply(treino, function(x) sum(is.na(x)))
modelo = glm (type_new ~ our+over+remove,
data = treino,
family = binomial)
summary(modelo)
odd.ratio = exp(coef(modelo))
pred.Teste = predict(modelo,
teste,
type = "response")
Teste_v2 = cbind(teste,
pred.Teste)
pred.val = prediction(pred.Teste,
Teste_v2$type)
# calculo da auc (area under the curve)
auc = performance(pred.val,"auc")
pred.val = prediction(pred.Teste,
Teste_v2$type)
pred.Teste = predict(modelo,
teste,
type = "response")
modelo = glm (type_new ~ our+over+remove,
data = treino,
family = binomial)
library(ggplot2)
library(dplyr)
set.seed(7)
dados <- data_frame(
x = runif(10),
y = 2*x + rnorm(10, 0, 0.1)
)
ggplot(dados, aes(x = x, y = y)) + geom_point()
modelo <- lm(y ~ x, data = dados)
summary(modelo)
modelo2 <- lm(y ~ poly(x, 9), data = dados)
summary(modelo2)
ggplot(dados, aes(x = x, y = y)) + geom_point() +
geom_smooth(formula = y ~ x,
colour = "red",
se = FALSE,
method = 'lm') +
geom_smooth(formula = y ~ poly(x, 9),
se = FALSE,
method = 'lm')
erro_modelo1 <- mean((dados$y - predict(modelo, newdata = dados))^2)
erro_modelo2 <- mean((dados$y - predict(modelo2, newdata = dados))^2)
erro_modelo1 %>% round(3)
## [1] 0.013
erro_modelo2 %>% round(3)
dados2 <- data_frame(
x = runif(100),
y = 2*x + rnorm(100, 0, 0.1)
)
ggplot(dados2, aes(x = x, y = y)) + geom_point() +
geom_smooth(data = dados,
formula = y ~ x,
colour = "red",
se = FALSE,
method = 'lm') +
geom_smooth(data = dados,
formula = y ~ poly(x, 9),
se = FALSE,
method = 'lm')
erro_modelo1 <- mean((dados2$y - predict(modelo, newdata = dados2))^2)
erro_modelo2 <- mean((dados2$y - predict(modelo2, newdata = dados2))^2)
erro_modelo1 %>% round(3)
## [1] 0.015
erro_modelo2 %>% round(3)
## cria um vetor com valores qualquer
dados_teste = c(10,20,15,30)
## utiliza o vetor como serie anual que inicia em 2005
dados_teste_serie_1 = ts(dados_teste, start = 2005)
## utiliza o vetor como serie mensal que inicia em 2005
dados_teste_serie_2 = ts(dados_teste, start = 2005, frequency = 12)
## utiliza o vetor como serie mensal que inicia em fevereiro de 2015
dados_teste_serie_3 = ts(dados_teste, start = c(2005,2), frequency = 12)
## graficos dos 3 para mostrar a diferenca nos eixos
par(mfrow=c(1,3))
plot(dados_teste_serie_1)
plot(dados_teste_serie_2)
plot(dados_teste_serie_3)
getwd()
setwd("C:/Users/mathe/DocumentsArquivos/Programação/EstatSite")
setwd("C:/Users/mathe/DocumentsArquivos/Programação/EstatSite")
setwd("C:/Users/mathe/Documents/Arquivos/Programação/EstatSite")
setwd("C://Users//mathe//Documents//Arquivos//Programação//EstatSite")
setwd("C:\Users\mathe\Documents\Arquivos\Programação\EstatSite")
setwd("C:\\Users\\mathe\\Documents\\Arquivos\\Programação\\EstatSite")
getwd()
setwd("C:\\Users\\mathe\\Documents\\Arquivos\\Programação\\EstatSite")
# load packages -----------------------------------------------------------
library(reshape2)
library(ggplot2)
# prepare data for ggplot2 ------------------------------------------------
## data extracted from https://plot.ly/~MattSundquist/2404/exports-and-imports-to-and-from-denmark-norway-from-1700-to-1780/#plot
playfair <- readRDS("william_playfair.rds")
getwd()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso? (S/N)")
if(resposta=='N')break
...
print(paste("Sua resposta foi", resposta))
}
formateCdoispontos()
formateCdoispontos()
formateCdoispontos()
formateCdoispontos("N")
formateCdoispontos()
formateCdoispontos()
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
if(resposta=='N')break
...
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
formateCdoispontos <- function(){
resposta <- readline(prompt = "Tem certeza que quer fazer isso?")
print(paste("Sua resposta foi:", resposta))
}
formateCdoispontos()
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
require(dplyr)
require(dplR)
help(fread)
require(data.table)
help(fread)
require(readr)
help("read_tsv")
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
col.sums <- apply(x, 2, sum)
row.sums <- apply(x, 1, sum)
rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums)))
stopifnot( apply(x, 2, is.vector))
x
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean, trim = .2)
apply(x, 2, mean, trim = .1)
apply(x, 2, mean, trim = .10)
apply(x, 2, mean)
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, 3, mean)
apply(x, 2, mean)
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5), x3 = 0)
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean)
apply(x, 3, mean)
apply(x, 1, mean)
apply(x, 2, mean)
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(4:1, 2:5), x3 = 0)
x
apply(x, 2, mean)
apply(x, c(1,2), mean)
apply(x, 2, mean)
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = 2, x3 = 0)
x
apply(x, 2, mean)
## Compute row and column sums for a matrix:
x <- cbind(x1 = 3, x2 = c(2,2,2,2), x3 = 0)
x
apply(x, 2, mean)
apply(x, 1, mean)
help("strsplit")
x = c("abcde", "ghij", "klmnopq")
strsplit(x, "", fixed=TRUE)
help(unique)
DT <- data.table(A = rep(1:3, each=4), B = rep(1:4, each=3),
C = rep(1:2, 6), key = "A,B")
duplicated(DT)
unique(DT)
DT
duplicated(DT)
unique(DT)
grep("[a-z]", letters)
txt <- c("arm","foot","lefroo", "bafoobar")
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
i # 2 and 4
txt[i]
## Double all 'a' or 'b's;  "\" must be escaped, i.e., 'doubled'
gsub("([ab])", "\\1_\\1_", "abc and ABC")
grep("[a-z]", letters)
txt <- c("arm","foot","lefroo", "bafoobar")
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
i # 2 and 4
txt[i]
## Double all 'a' or 'b's;  "\" must be escaped, i.e., 'doubled'
gsub("([ab])", "\\1_\\1_", "abc and ABC")
Variáveis = c("Nome", "Proximinade", "Intimidade", "Confiança", "X9", "Agressividade")
Ayron = c("Ayron", 6, 3, 6, 3, 5)
Inim = rbind(Variáveis, Ayron)
Inim
Inim
Inim
Inim <- matrix(0)
colnames(Inim) <- c("Nome", "Proximinade",
"Intimidade", "Confiança",
"X9", "Agressividade")
Inim <- matrix(NA, ncol = 9)
colnames(Inim) <- c("Nome", "Proximinade",
"Intimidade", "Confiança",
"X9", "Agressividade")
Inim <- matrix(NA, ncol = 6)
colnames(Inim) <- c("Nome", "Proximinade",
"Intimidade", "Confiança",
"X9", "Agressividade")
Inim
while(1>0){print(1)}
Y = 11.6570 + 0*0.6556
Y = 11.6570 + 5*0.6556
11.6570 + 0*0.6556
11.6570 + 5*0.6556
(11.6570 + 5*0.6556) - (11.6570 + 0*0.6556)
v = c(1,2,3,34,54,43,7,2,3,)
v = c(1,2,3,34,54,43,7,2,3)
Salario2 = Salario/3
Idade = c(45,41,55,36,45,55,50,49,47,69,
51,48,62,45,37,50,50,50,58,57)
Salario = c(208,339,736,291,58,498,643,390,332,750,
368,659,234,396,300,343,536,543,217,1103)
Salario2 = Salario/3
dados = data.frame(Idade,Salario); dados
dados = data.frame(Idade,Salario2); dados
fit = lm(Idade~Salario2, dados); fit
fit = lm(Idade~Salario, dados); fit
0.04331/3
x = c(0,100,200,250,300,400)
y = c(1000, 1500, 1500, 2000, 2000, 500)
fit(x,y)
lm(x~y)
lm(y~x)
summary(fit)
plot(fit)
lucro = c(1000, 1500, 1500, 2000, 2000, 500)
propaganda = c(0,100,200,250,300,400)
lucro = c(1000, 1500, 1500, 2000, 2000, 500)
fit <- lm(lucro~propaganda)
summarlucro(fit)
summary(fit)
plot(fit)
require(ggplot2)
ggplot(fit) + geom_abline()
ggplot(fit, aes(x = propaganda, y = lucro)) + geom_abline()
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_abline()
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_abline()
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_abline(size = 2)
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_abline(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_abline(size = 2) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_abline(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_point(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
propaganda = c(   0,  100,  200,  250,  300, 400)
lucro =      c(1000, 1500, 1500, 2000, 2000, 500)
fit <- lm(lucro~propaganda)
summary(fit)
require(ggplot2)
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_point(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
fit <- lm(lucro~propaganda); fit
propaganda = c(   0,  100,  200,  250,  300,  400)
lucro =      c(1000, 1500, 1500, 2000, 2000, 2500)
fit <- lm(lucro~propaganda); fit
summary(fit)
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_point(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
require(ggplot2)
propaganda = c(   0,  100,  200,  250,  300, 400)
lucro =      c(1000, 1500, 1500, 2000, 2000, 500)
fit <- lm(lucro~propaganda); fit
summary(fit)
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_point(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
propaganda = c(   0,  100,  200,  250,  300,  400)
lucro =      c(1000, 1500, 1500, 2000, 2000, 2500)
fit <- lm(lucro~propaganda); fit
summary(fit)
ggplot(fit, aes(x = propaganda, y = lucro)) +
geom_point(size = 2) +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = lm, se = FALSE, col = "2")
(1 - 85,1429/111,5714)*100 = (1 - 0,763124779)*100
(1 - 85.1429/111.5714)*100
data(agaricus.train, package = 'xgboost')
data(agaricus.test,  package = 'xgboost')
# Pacotes
require(xgboost)
require(Ckmeans.1d.dp)
require(DiagrammeR)
data(agaricus.train, package = 'xgboost')
data(agaricus.test,  package = 'xgboost')
# Resumo dos dados
str(dados_treino)
# Coletando subsets de treino e de teste
dados_treino <- agaricus.train
dados_teste  <- agaricus.test
# Resumo dos dados
str(dados_treino)
# Visualizando as dimensões
dim(dados_treino$data)
dim(dados_teste$data)
# Classes a serem previstas
class(dados_treino$data)[1]
class(dados_treino$label)
# Construindo o modelo
?xgboost
modelo_v1 <- xgboost(data  = dados_treino$data,
label = dados_treino$label,
max.depth = 2,
eta = 1,
# controla a learn rate, previne overfitting
nthread = 2,
# executar o treinamento do modelo em paralelo
nround = 2,
# 2 passadas nos dados de treino
objective = "binary:logistic")
# Imprimindo o modelo
modelo_v1
# Convertendo para Matriz Densa
?xgb.DMatrix
dtrain <- xgb.DMatrix(data = dados_treino$data,
label = dados_treino$label)
dtrain
class(dtrain)
# Modelo baseado em matriz densa
modelo_v2 <- xgboost(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
objective = "binary:logistic")
# Imprimindo o modelo
modelo_v2
# Criando um modelo e imprimindo as etapas realizadas
modelo_v3 <- xgboost(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
objective = "binary:logistic",
verbose = 2)
# Imprimindo o modelo
modelo_v3
# Fazendo previsões
pred <- predict(modelo_v3, dados_teste$data)
# Tamanho do vetor de previsões
print(length(pred))
# Previsões
print(head(pred))
# Transformando as previsões em classificação
prediction <- as.numeric(pred > 0.5)
print(head(prediction))
# Erros
err <- mean(as.numeric(pred > 0.5) != dados_teste$label)
print(paste("test-error = ", err))
# Criando 2 matrizes
dtrain <- xgb.DMatrix(data = dados_treino$data,
label = dados_treino$label)
dtest  <- xgb.DMatrix(data =  dados_teste$data,
label =  dados_teste$label)
# Criando uma watchlist
watchlist <- list(train = dtrain, test = dtest); watchlist
modelo_v4 <- xgb.train(data = dtrain,
max.depth = 2,
eta = 1,
nthread = 2,
nround = 2,
watchlist = watchlist,
# lista nomeada de matrizes densas,
# usado para avaliar a performance do modelo
# parâmetro que nos permite incluir conjuntos de dados
# para fazer validação durante o treinamento
objective = "binary:logistic")
# Obtendo o label
label = getinfo(dtest, "label")
# Fazendo previsões
pred <- predict(modelo_v4, dtest)
# Erro
err <- as.numeric(sum(as.integer(pred > 0.5) != label))/length(label)
print(paste("test-error = ", err))
# Criando a Matriz de Importância de Atributos
importance_matrix <- xgb.importance(model = modelo_v4)
print(importance_matrix)
# Plot
xgb.plot.importance(importance_matrix = importance_matrix)
# Dump
xgb.dump(modelo_v4, with_stats = T)
# Plot do modelo
xgb.plot.tree(model = modelo_v4)
# Salvando o modelo
xgb.save(modelo_v4, "xgboost.model")
# Carregando o modelo treinado
bst2 <- xgb.load("xgboost.model")
# Fazendo previsões
pred2 <- predict(bst2, dados_teste$data); pred2
med = function(l1=10,l2=10,l3=10,l4=10,t1=6.5,t2=6.7,t3=0,TF=0){
return(l1+l2+l3+l4+2*(t1+t2+t3)+3*(TF)/16)
}
med()
med = function(l1=10,l2=10,l3=10,l4=10,t1=6.5,t2=6.7,t3=0,TF=0){
return((l1 + l2 + l3 + l4 + 2*(t1 + t2 + t3) + 3*(TF))/16)
}
med()
med = function(l1=10,l2=10,l3=10,l4=10,t1=6.5,t2=6.7,t3=0,TF=0){
return((l1 + l2 + l3 + l4 + 2*(t1 + t2 + t3) + 3*(TF))/13)
}
med()
med(t3=4,TF=4)
med(t3=2,TF=4)
med(t3=0,TF=4)
med(t3=1,TF=3)
med(t3=2,TF=3)
med(t3=3,TF=2)
10*4 + 6.7+6.5+6.3 + 5.3
(10*4 + 6.7+6.5+6.3 + 5.3)/8
(10*4 + (6.7+6.5+6.3)*2 + 3*5.3)/13
(10*4 + (6.7+6.5+6.3)*(2/3) + 3*5.3)/8
(10 + (6.7+6.5+6.3)*(2/3) + 3*5.3)/5
'demo()'
demo()
q()
(10 + (6.7+6.5+6.3)*(2/3) + 3*5.3)/8
(10 + (6.7+6.5+6.3)*(2/3) + 5.3)/3
(10 + (6.7+6.5+6.3)*2 + 3*5.3)/8
(10 + 6.7*2 + 6.5*2 + 6.3*2 + 3*5.3)/10
setwd("C:/Users/mathe/Desktop/Arquivos/Programação/EstatSite - R")
install.packages("powerMediation")
